diff --git a/modules/rtp_rtcp/source/rtp_sender_video.cc b/modules/rtp_rtcp/source/rtp_sender_video.cc
index da5dad5839..fed601cd35 100644
--- a/modules/rtp_rtcp/source/rtp_sender_video.cc
+++ b/modules/rtp_rtcp/source/rtp_sender_video.cc
@@ -627,6 +627,10 @@ bool RTPSenderVideo::SendVideo(
     // Enable header authentication if the field trial isn't disabled.
     std::vector<uint8_t> additional_data;
     if (generic_descriptor_auth_experiment_) {
+      // Patch applied MEGA
+      if (!has_generic_descriptor) {
+        return false;
+      }
       additional_data = RtpDescriptorAuthentication(video_header);
     }
 
diff --git a/video/buffered_frame_decryptor.cc b/video/buffered_frame_decryptor.cc
index 27a3c4cfc4..52b9b82553 100644
--- a/video/buffered_frame_decryptor.cc
+++ b/video/buffered_frame_decryptor.cc
@@ -74,6 +74,12 @@ BufferedFrameDecryptor::FrameDecision BufferedFrameDecryptor::DecryptFrame(
   // Enable authenticating the header if the field trial isn't disabled.
   std::vector<uint8_t> additional_data;
   if (generic_descriptor_auth_experiment_) {
+    // When using encryption we expect the frame to have the generic descriptor.
+    // Patch applied MEGA
+    if (frame->GetRtpVideoHeader().generic == absl::nullopt) {
+      RTC_LOG(LS_ERROR) << "No generic frame descriptor found dropping frame.";
+      return FrameDecision::kDrop;
+    }
     additional_data = RtpDescriptorAuthentication(frame->GetRtpVideoHeader());
   }
 
